services:
  web:
    build: .  # Используем Dockerfile вместо прямого образа
    container_name: backend_hr
    volumes:
      - static:/usr/src/app/staticfiles  # Должно соответствовать WORKDIR в Dockerfile
      - ./:/usr/src/app
    environment:
      SECRET_KEY: "Cp4ADYDUB5G5vDtfuMhp2RtTCmtExwaP"
      DEBUG: "False"
      DATABASE_URL: "postgresql://postgres:easy@5.129.207.182:5432/tst"
      DATABASE_NAME: "tst"
      DATABASE_HOST: "5.129.207.182"
      DATABASE_PASSWORD: "easy"
      # IS_URL: "True"
      RESET_PASSWORD_COMMAND: "use_admin_rooles_delete_this"
      REDIS_URL: "redis://:Bm84qq9E8G@hr_redis:6379/0"
    depends_on:
      - hr_redis
    ports:
      - "8000:8000"
    restart: unless-stopped
    command: >
      sh -c "python manage.py makemigrations main &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 laborcount.wsgi:application"
    networks:
      - backend_network # была проблема дж не подключался к редису из за того что  они были в разных сетях имеется в виду что не в backend_network
  hr_redis:
    image: redis:7.2-alpine
    container_name: hr_redis
    ports:
      - "6399:6379"
    volumes:
      - redis_data:/data
    command: redis-server --requirepass Bm84qq9E8G
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "Bm84qq9E8G", "ping"]  
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - backend_network

volumes:
  redis_data:
  static:

networks:
  backend_network:  # Единая сеть для всех сервисов
    driver: bridge
